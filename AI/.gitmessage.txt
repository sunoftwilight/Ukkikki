# [커밋 유형 태그] : <제목> 
#   - 커밋 유형 태그 : 제목의 형태이며 제목 첫 글자는 대문자로 작성
#   - 제목은 최대 50자 이내로 작성하고 마침표 및 특수기호는 사용 금지
#   - 커밋 유형 이후 제목과 본문은 한글로 작성하여 내용이 잘 전달될 수 있도록 할 것
# 바로 밑줄에 작성

# 바로 아래 한 줄 공백 유지 (머릿말과 본문의 분리를 위함)

################################
# <본문> - 필요시 작성. 한 줄당 최대 72자까지, 72자 초과시 줄바꿈, ”왜”, “무엇을 위해” 작업했는지에 초점을 맞춰 작성
#   - 본문에는 변경한 내용과 이유 설명 (How 보다는 What & Why 위주 설명)
#   - 본문 내용은 양에 구애받지 않고 최대한 상세하게 작성
# 바로 밑줄에 작성

# 바로 아래 한 줄 공백 유지 (본문과 바닥글의 분리를 위함)

################################
# <꼬리말> - 필요시 작성
#   - 꼬리말은 옵션이므로 이슈 트래커 ID를 명시하고 싶을 때 작성
#   - 꼬리말은 “유형: #이슈 번호” 형식으로 사용
#   - 여러 개의 이슈 번호를 적을 때는 쉼표로 구분
#   - 이슈 트래커 유형은 다음 중 하나 사용
#       - Fixes: 이슈 수정중 (아직 해결되지 않은 경우)
#       - Resolveds: 이슈 해결했을 때 사용
#       - Ref: 참고할 이슈가 있을 때 사용
#       - Related to: 해당 커밋에 관련된 이슈 변호 (아직 해결되지 않은 경우)

# 바로 밑줄에 작성 (이슈 해결 시에는 resolve: #99와 같이 작성)

#######🆁🅴🅼🅴🅱🅴🆁 🅼🅴######
# [커밋 유형 태그 리스트]
#   FEAT : 새로운 기능 추가
#   FIX     : 버그 수정
#   DOCS    : 문서 수정
#   STYLE   : 코드 포맷팅, 세미콜론 누락, 코드 자체의 변경이 없는 경우
#   REFACTOR : 코드 리팩토링
#   TEST    : 테스트 코드, 리팩토링 테스트 코드 추가
#   CHORE   : 빌드 업무 수정, 패키지 매니저 수정, 그 외 기타 수정 ex).gitignore
#   DESING  : CSS 등 사용자 UI 디자인 변경
#   COMMENT : 필요한 주석 추가 및 변경
#   RENAME  : 파일 또는 폴더 명을 수정하거나 옮기는 작업만인 경우
#   REMOVE  : 파일을 삭제하는 작업만 수행한 경우
#   !HOTFIX : 급하게 치명적인 버그를 고쳐야 하는 경우
#   !BREAKING CHANGE    :  커다란 API 변경의 경우
# ------------------
# [커밋 메시지 예시]
#  fix: CardList 컴포넌트 클릭 시 공백으로 나오는 오류 수정
#
#  이번 커밋은 테스트 용도로 본문 내용이다.
#  부담 없이 작성하길 바란다.
#
#  Resolveds: #232
# ------------------
# [우리 팀이 지켜야 할 보편적 규칙]
#   1. 언어는 한국어를 사용한다.
#       - 예외 사항) 최초 커밋 메시지는 “Initial commit”으로 한다.
#   2. 문장의 구성
#       1) 문장은 간결하게 구성한다.
#       2) 현재형을 사용한다.
#   3. 작성한 당사자가 아닌 제 3자가 이해할 수 있도록 작성한다.
#   4. 단순한 문장일수록 좋다.
#   5. 제목, 본문, 꼬리말 세가지 파트로 나누고 각 파트는 빈 행을 두어 구분
# ------------------
# [우리 팀의 커밋 타이밍]
#  - 의미 있는 코드의 변화가 있다면 커밋을 진행한다.
#  - 의미가 있다면 사소한 것을 커밋 하는 것은 전혀 잘못된 것이 아니다.
#  - 다만 의미 없는 잦은 커밋은 히스토리 추적에 불편함을 주므로 의미 없는 커밋은 자제한다.
################################
